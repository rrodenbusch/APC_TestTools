#!/usr/bin/perl
use strict;
use warnings;
my (%diskInfo,@diskIDs,@SDs,@smallSDs,@largeSDs);

sub getInputData {
   my ($msg,$default) = @_;

   print "$msg";
   my $resp = '';
   $resp = <STDIN>;
   $resp =~ s/\R//g;
   $resp =~ s/\s+//g;
   $resp = uc($resp);
   
   $resp = $default if (defined($default) && ($resp eq ''));
   return ($resp);
}

sub getYesNo {
   my ($msg,$default) = @_;

   print "$msg";
   my $resp = '';
   while ( ($resp ne 'Y') && ($resp ne 'N') ) {
      $resp = <STDIN>;
      $resp =~ s/\R//g;
      $resp = uc($resp);
      $resp = $default if (defined($default) && ($resp eq ''));
   }
   
   return ($resp);
}

### Get USB disk information
my $sdDevs = `sudo blkid |grep /dev/sd`;
my @flds = split("\n",$sdDevs);
foreach my $curFld (@flds) {
   my ($dev,$data) = split(':',$curFld);
   push (@SDs,$dev);
   my $disk = substr($dev,0,8);
   my $diskDesc = `sudo fdisk -l $disk |head -2`;
   my @data = split(' ',$diskDesc);
   my $diskSize = $data[2];
   my $diskUnit = $data[3];
   $diskUnit =~ s/,//g;
   $diskInfo{$disk}->{size} = $diskSize;
   $diskInfo{$disk}->{unit} = $diskUnit;
   $diskInfo{$disk}->{desc} = $diskDesc;
   push(@smallSDs, $disk) if  ( ($diskUnit eq 'GiB') && ($diskSize < 200) );
   push(@largeSDs, $disk) if  ( ($diskUnit eq 'GiB') && ($diskSize > 200) );
}

### Display small SDs
my $numTargs = scalar(@smallSDs);
print "\n$numTargs small USB drives\n";
foreach my $curDrive (@smallSDs) {
   print"$curDrive \t$diskInfo{$curDrive}->{size} $diskInfo{$curDrive}->{unit}";
   my @lines = split("\n",$diskInfo{$curDrive}->{desc});
   print "\n\t" . join("\n\t",@lines) ."\n";
}
### Display Large SDs
$numTargs = scalar(@largeSDs);
print "\n$numTargs large USB drives\n";
foreach my $curDrive (@largeSDs) {
   print"$curDrive \t$diskInfo{$curDrive}->{size} $diskInfo{$curDrive}->{unit}";
   my @lines = split("\n",$diskInfo{$curDrive}->{desc});
   print "\n\t" . join("\n\t",@lines) ."\n";
}

my $targDev = '';
$targDev = $largeSDs[0] if (defined($largeSDs[0]));
my $continue = 'N';
if  ( scalar(@largeSDs) == 1 ) {
   $continue = getYesNo("\nSetup data disk on $targDev [Y,n] ?",'Y');   
}

if ($continue eq 'Y') {
   my $targDrive = $targDev;
   $targDev .= '1';
   my $resp =    `sudo sfdisk --delete $targDrive`;
   print "Delete partition table $targDrive\n$resp\n";
   $resp = `sudo parted -a opt $targDrive mkpart primary ext4 0% 100%`;
   print "Create partition $targDrive\n$resp\n";
   ## File System
   $resp = `sudo mkfs.ext4 $targDev`;
   print "Create file system $targDev\n$resp\n";
   ## UUIDs
   $resp = `sudo tune2fs -U \$(uuid) $targDev`;
   print "$targDev UUID $resp\n";
   ## LABELs
   $resp = `sudo tune2fs -L DATA   $targDev`;
   print "$targDev LABEL $resp\n";
   my $blkid = `sudo blkid`;
   print "blkid\n$blkid\n";
   ## Files   
   `mkdir /data` unless (-d '/data');
   $resp = `sudo mount $targDev /data`;
   if ($? ne 0) { die "Unable to mount $targDev on /data\t$!\n"; }
   print "/data mounted";
   `sudo chmod 1777 /data`;
   `mkdir /data/NVR`           unless (-d '/data/NVR');
   `mkdir /data/NVR/Pending`   unless (-d '/data/NVR/Pending');
   `mkdir /data/NVR/Working`   unless (-d '/data/NVR/Working');
   `mkdir /data/NVR/Complete`  unless (-d '/data/NVR/Complete');
   `mkdir /data/rdata`         unless (-d '/data/rdata' );
   `mkdir /data/rdata/in`      unless (-d '/data/rdata/in' );
   `mkdir /data/rdata/out`     unless (-d '/data/rdata/out' );
   `mkdir /data/rdata/working` unless (-d '/data/rdata/working' );
   `mkdir /data/rLog`          unless (-d '/data/rLog' );
   `sudo umount  /data`;   
}

0;
