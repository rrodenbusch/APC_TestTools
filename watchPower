#!/usr/bin/perl
use strict;
use warnings;
use Config::IniFiles;
use RPi::I2C;

# Setup Signals
my %sig = ( HUP => 0, ABRT => 0, USR1 => 0, USR2 => 0, CONT => 0, QUIT => 0, STOP => 0, INT => 0 );
$SIG{HUP}  = sub {$sig{HUP} = 1};
$SIG{ABRT} = sub {$sig{ABRT} = 1};
$SIG{USR1} = sub {$sig{USR1} = 1};
$SIG{USR2} = sub {$sig{USR2} = 1};
$SIG{CONT} = sub {$sig{CONT} = 1};
$SIG{QUIT} = sub {$sig{QUIT} = 1};
$SIG{STOP} = sub {$sig{STOP} = 1};
$SIG{INT}  = sub {$sig{INT} = 1};

my $SRCDIR="$ENV{HOME}/APC_TestTools";
my $logfname = "$ENV{HOME}/power.log";
my $logfh;
my $logName='watchPower';
my $USAGE = "Usage: watchPower\n".
                  "\t   -q Quiet, logfile only \n" ;
                  
sub getCmdLine {
   my ($dateStr);
   my %options=();
   
   getopts("hq", \%options);
   $options{quiet} = (defined($options{q}));
   return(\%options);
}  # getCmdLine

sub openLogFile {
   open ($logfh, ">>$logfname");
   my $oldfh = select($logfh); # default
   $| = 1;
   select($oldfh);
   return($logfh);
}  # openLogFile

sub logMsg {
   my ($msg,$options) = @_;
   
   my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
   my $dateStr = sprintf("%04d%02d%02d %02d:%02d:%02d",$year+1900,$mon+1,$mday,$hour,$min,$sec);
   $dateStr =~ s/\R//g;
   print "$dateStr, $logName: $msg\n" unless (defined($options) && ($options->{quiet}));
   print $logfh "$dateStr, $logName: $msg\n" if defined($logfh);
}  # logMsg

sub attach {
   my $addy = shift;
   my ($device,$retval);
   if ($device = RPi::I2C->new($addy)) {
      $retval = $device if ( $device->check_device($addy) );      
   }
   return ($retval);
}  # attach 


################################# Main ##########################################
openLogFile();
my $cfg=Config::IniFiles->new(-file => "$ENV{HOME}/RPi/config.ini") ;
if  (!$cfg) {
   my $list = join("\n",@Config::IniFiles::errors);
   print $list;
   die;
};

sub getCfgVal{
   my ($cfg,$key)=@_;
   my $rval = '';
   $rval = $cfg->val('default',$key) if ($cfg->exists('default',$key));
   $rval =~ s/\R//g;
   return($rval);
}

my ($PwrBit,$CapBit,$PiBit,$NUCBit,$TNetBit,$BrdgBit,$NVNBit,$SnsrBit)  = (0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80);

my ($Pwr1,$Cap1,$Pwr,$Cap,$Pi,$NUC,$TNet,$Brdg,$NVN,$Snsr);
($Pwr,$Cap,$Pi,$NUC,$TNet,$Brdg,$NVN,$Snsr) = (0,0,0,0,0,0,0,0);
my ($Line1,$gpio11) = (0,1);
my ($prevScap,$prevNUC,$prevNVN) = (0,0,0);
my ($ScapVolts,$NVNVolts,$NUCVolts) = (-1,-1,-1);

my $devA = attach(0x0A);
my $devG = attach(0x21);
my ($dotCnt, $prevLine, $line) = (0,'1','2');

my ($CAPscale,$LOADscale,$CapVolt,$LineVolt)=(1.0,1.0,1.0,1.0);
$CAPscale =  getCfgVal($cfg,'CAPscale');
$LOADscale = getCfgVal($cfg,'LOADscale');
$CAPscale=1.0  if ($CAPscale eq '');
$LOADscale=1.0 if ($LOADscale eq '');
logMsg "LOADscale,$LOADscale,CAPscale,$CAPscale";
my $header="CapVolt,LineVolt,Line,LineGPIO,CapDIO,Cap1GPIO,PwrDIO,PwrDIO,NUC,NVN,TNet,Bridge,Sensor,Pi,CapOnVolt,NVNonVolt,NUConVolt";
logMsg "$header";
while ( ($sig{INT} == 0) && ($sig{QUIT} == 0) && ($sig{ABRT} == 0) ) {
   ($Pwr,$Cap,$Pi,$NUC,$TNet,$Brdg,$NVN,$Snsr) = (0,0,0,0,0,0,0,0);

   ## GPIO LINE, power and cap bits
   $Pwr1   = `gpio -g read 21`;
   $Cap1   = `gpio -g read 20`;
   $gpio11 = `gpio -g read 11`;
   if ( ($gpio11 & 0x01) == 0x01) {$Line1 = 0;}
   if ( ($gpio11 & 0x01) == 0x00) {$Line1 = 1;}
   
   my $resp = -1;
   $resp = $devA->read_word(0x0B) if defined($devA);
   if ($resp != -1) {
      $resp = $resp & 0xFF;   
      $CapVolt = $CAPscale * $resp / 10;
   }  else {
      $devA = attach(0x0A);
   }

   $resp = -1;
   $resp = $devA->read_word(0x0A) if defined($devA);
   if ($resp != -1) {
      $resp = $resp & 0xFF;
      $LineVolt = $LOADscale * $resp / 10;
   } else {
      $devA = attach(0x0A);
   }

   ## MCP Bits
   $resp = -1;
   $resp = $devG->read_byte(0x09) if (defined($devG));
   if ($resp != -1) {
      $Pwr  = 1 if ($resp & $PwrBit);
      $Cap  = 1 if ($resp & $CapBit);
      $Pi   = 1 if ($resp & $PiBit);
      $NUC  = 1 if ($resp & $NUCBit);
      $TNet = 1 if ($resp & $TNetBit);
      $Brdg = 1 if ($resp & $BrdgBit);
      $NVN  = 1 if ($resp & $NVNBit);
      $Snsr = 1 if ($resp & $SnsrBit);      
   } else {
      $devG = attach(0x21);
   }

   $ScapVolts = $CapVolt if (($Cap == 1) &&  ($prevScap == 0) && ($CapVolt < $ScapVolts) );
   $NVNVolts  = $CapVolt if (($NVN == 1) &&  ($prevNVN == 0)  && ($CapVolt < $NVNVolts) );
   $NUCVolts  = $CapVolt if (($NUC == 1) &&  ($prevNUC == 0)  && ($CapVolt < $NUCVolts) );
   ($prevScap,$prevNVN,$prevNUC) = ($Cap,$NVN,$NUC);

   my $outline = "%3.2f,%3.2f,%01d,%01d,%01d,%01d,%01d,%01d,%01d,%01d,%01d,%01d,%01d,%01d,%3.2f,%3.2f,%3.2f";
   $line = sprintf($outline,$CapVolt,$LineVolt,$Line1,$gpio11,$Cap, $Cap1,$Pwr,$Pwr1,$NUC,$NVN,$TNet,$Brdg,$Snsr,$Pi,$ScapVolts,$NVNVolts,$NUCVolts);
   logMsg($line);
   sleep 1;
}
1;
