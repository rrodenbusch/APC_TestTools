#!/usr/bin/perl
use warnings;
use strict;

use RPi::I2C;

# Setup Signals
my %sig = ( HUP => 0, ABRT => 0, USR1 => 0, USR2 => 0, CONT => 0, QUIT => 0, STOP => 0, INT => 0, SUSP => 0 );
$SIG{HUP}  = sub {$sig{HUP} = 1};
$SIG{ABRT} = sub {$sig{ABRT} = 1};
$SIG{USR1} = sub {$sig{USR1} = 1};
$SIG{USR2} = sub {$sig{USR2} = 1};
$SIG{CONT} = sub {$sig{CONT} = 1};
$SIG{QUIT} = sub {$sig{QUIT} = 1};
$SIG{STOP} = sub {$sig{STOP} = 1};
$SIG{INT}  = sub {$sig{INT} = 1};

my ($door1, $door2);
my ($prevDoor1, $prevDoor2) = (-1,-1);

while( ($sig{INT}==0) && ($sig{QUIT} == 0) &&
       ($sig{STOP} == 0) ) {
	($door1, $door2) = (0,0);
	my $resp = `$ENV{HOME}/APC_TestTools/I2Cio.pl read 0x0F 0x03`;
	$resp =~ s/\R//g;
        my @fields = split(' ',$resp);
	my $bits = $fields[3] + 0;
        $door1 = 1 if ( ($bits & 0x01)
 > 0);
        $door2 = 1 if ( ($bits & 0x02) > 0);
	if ( ($door1 != $prevDoor1) || ($door2 != $prevDoor2) ) {
		($prevDoor1,$prevDoor2) = ($door1,$door2);
		my $line = sprintf("%02X  Door1:  %01d   Door2:   %01d\n",$bits,$door1,$door2);
		print $line;
	}
}

1;
