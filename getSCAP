#!/usr/bin/perl
use strict;
use warnings;
use RPi::I2C;

my $minLoops = 0;

$minLoops = $ARGV[0] if ( exists($ARGV[0]) && ($ARGV[0] > 0) );
# Setup Signals
my %sig = ( HUP => 0, ABRT => 0, USR1 => 0, USR2 => 0, CONT => 0, QUIT => 0, STOP => 0, INT => 0 );
$SIG{HUP}  = sub {$sig{HUP} = 1};
$SIG{ABRT} = sub {$sig{ABRT} = 1};
$SIG{USR1} = sub {$sig{USR1} = 1};
$SIG{USR2} = sub {$sig{USR2} = 1};
$SIG{CONT} = sub {$sig{CONT} = 1};
$SIG{QUIT} = sub {$sig{QUIT} = 1};
$SIG{STOP} = sub {$sig{STOP} = 1};
$SIG{INT}  = sub {$sig{INT} = 1};

my $PwrBit  = 0x01;
my $CapBit  = 0x02;
my $PiBit   = 0x04;
my $NUCBit  = 0x08;
my $TNetBit = 0x10;
my $BrdgBit = 0x20;
my $NVNBit  = 0x40;
my $SnsrBit = 0x80;

sub attach {
   my $addy = shift;
   my ($device,$retval);

   if ($device = RPi::I2C->new($addy)) {
      $retval = $device if ( $device->check_device($addy) );      
   }
   return ($retval);
}        

my ($Pwr1,$Cap1,$Pwr,$Cap,$Pi,$NUC,$TNet,$Brdg,$NVN,$Snsr);
($Pwr,$Cap,$Pi,$NUC,$TNet,$Brdg,$NVN,$Snsr) = (0,0,0,0,0,0,0,0);
my ($Line1,$gpio11) = (0,1);
my ($prevScap,$prevNUC,$prevNVN) = (0,0,0);
my ($ScapVolts,$NVNVolts,$NUCVolts) = (999,999,999);

my $devA = attach(0x0A);
my $devG = attach(0x21);
my ($dotCnt, $prevLine, $line) = (0,'1','2');

my $CAPscale = 1.0;
my $LOADscale = 1.0;
$line = `grep LOADscale $ENV{HOME}/RPi/config.ini`;
if (defined($line)) {
   $line =~ s/\R//g;
   my ($var,$val) = split('=',$line);
   $LOADscale = $val if (defined($val));
}
my 
$line2 = `grep CAPscale $ENV{HOME}/RPi/config.ini`;
if (defined($line) ) {
   $line2 =~ s/\R//g;
   my ($var,$val) = split('=',$line2);
   $CAPscale = $val if (defined($val));
}
print "Using Load Scale $LOADscale  CAP scale $CAPscale\n";

while ( ($sig{INT} == 0) && ($sig{QUIT} == 0) && ($sig{ABRT} == 0) ) {
    $minLoops-- if ($minLoops > 0);

   ($Pwr,$Cap,$Pi,$NUC,$TNet,$Brdg,$NVN,$Snsr) = (0,0,0,0,0,0,0,0);

   $Pwr1 = `gpio -g read 0x21`;
   $Cap1 = `gpio -g read 0x20`;
   $gpio11 = `gpio -g read 0x11`;
   if ( ($gpio & 0x01) == 0x01) {$Line1 = 0;}
   if ( ($gpio & 0x01) == 0x00) {$Line1 = 1;}
   
   my $resp = $devA->read_word(0x0B);
   $resp = $resp & 0xFF;
   my $CapVolt = $CAPscale * $resp / 10;

   $resp = $devA->read_word(0x0A);
   $resp = $resp & 0xFF;
   my $LineVolt = $LOADscale * $resp / 10;

   my $Bits = $devG->read_byte(0x09);
   $Pwr  = 1 if ($Bits & $PwrBit);
   $Cap  = 1 if ($Bits & $CapBit);
   $Pi   = 1 if ($Bits & $PiBit);
   $NUC  = 1 if ($Bits & $NUCBit);
   $TNet = 1 if ($Bits & $TNetBit);
   $Brdg = 1 if ($Bits & $BrdgBit);
   $NVN  = 1 if ($Bits & $NVNBit);
   $Snsr = 1 if ($Bits & $SnsrBit);

   $ScapVolts = $CapVolt if (($Cap == 1) && ($prevScap == 0) && ($CapVolt < $ScapVolts) );
   $NVNVolts = $CapVolt if (($NVN == 1) && ($prevNVN == 0)   && ($CapVolt < $NVNVolts) );
   $NUCVolts = $CapVolt if (($NUC == 1) && ($prevNUC == 0)   && ($CapVolt < $NUCVolts) );
   ($prevScap,$prevNVN,$prevNUC) = ($Cap,$NVN,$NUC);


   my $outline = "\nCap %3.2f Volt Line %3.2f Volt\n".
                   "              Line %01d DIO %01d\n".
                   "              Cap  %01d %01d\n" .
                   "              Pwr  %01d %01d\n" .
                   "              NUC  %01d NVN  %01d\n" .
                   "              TNet %01d Brdg %01d Snsr %01d Pi %01d\n" ;
   $line = sprintf($outline,$Line1,$gpio11,$CapVolt,$LineVolt,$Cap, $Cap1,$Pwr,$Pwr1,$NUC,$NVN,$TNet,$Brdg,$Snsr,$Pi);
   if ($line ne $prevLine) {
      print $line;
      $prevLine = $line;
   } else {
      $dotCnt++;
      print '.';
      print "\n"  if ($dotCnt > 40);
      $dotCnt = 0 if ($dotCnt > 40);
   }
   sleep 1;
}

print "\nExit on Intterupt\n" if ($sig{INT} !=0);
print "\nExit on Quit\n" if ($sig{QUIT} !=0);
print "\nExit on Stop\n" if ($sig{STOP} !=0);

$line2 = sprintf("SCap @ %3.2f\nNVN  @ %3.2f\nNUC  %3.2f\n",$ScapVolts,$NVNVolts,$NUCVolts);
print $line2;


1;
